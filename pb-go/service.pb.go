// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StringValue struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringValue) Reset()         { *m = StringValue{} }
func (m *StringValue) String() string { return proto.CompactTextString(m) }
func (*StringValue) ProtoMessage()    {}
func (*StringValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *StringValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringValue.Unmarshal(m, b)
}
func (m *StringValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringValue.Marshal(b, m, deterministic)
}
func (m *StringValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringValue.Merge(m, src)
}
func (m *StringValue) XXX_Size() int {
	return xxx_messageInfo_StringValue.Size(m)
}
func (m *StringValue) XXX_DiscardUnknown() {
	xxx_messageInfo_StringValue.DiscardUnknown(m)
}

var xxx_messageInfo_StringValue proto.InternalMessageInfo

func (m *StringValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//小米网关设备
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ResponseMessage struct {
	Code                 string   `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseMessage) Reset()         { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()    {}
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseMessage.Unmarshal(m, b)
}
func (m *ResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseMessage.Marshal(b, m, deterministic)
}
func (m *ResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessage.Merge(m, src)
}
func (m *ResponseMessage) XXX_Size() int {
	return xxx_messageInfo_ResponseMessage.Size(m)
}
func (m *ResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessage proto.InternalMessageInfo

func (m *ResponseMessage) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ResponseMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HTTPConfig struct {
	RunId                string   `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Domain               string   `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`
	RemoteIP             string   `protobuf:"bytes,3,opt,name=RemoteIP,proto3" json:"RemoteIP,omitempty"`
	RemotePort           int32    `protobuf:"varint,4,opt,name=RemotePort,proto3" json:"RemotePort,omitempty"`
	UserName             string   `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password             string   `protobuf:"bytes,6,opt,name=Password,proto3" json:"Password,omitempty"`
	IfHttps              bool     `protobuf:"varint,7,opt,name=IfHttps,proto3" json:"IfHttps,omitempty"`
	Description          string   `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	RemotePortStatus     bool     `protobuf:"varint,9,opt,name=RemotePortStatus,proto3" json:"RemotePortStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPConfig) Reset()         { *m = HTTPConfig{} }
func (m *HTTPConfig) String() string { return proto.CompactTextString(m) }
func (*HTTPConfig) ProtoMessage()    {}
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *HTTPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPConfig.Unmarshal(m, b)
}
func (m *HTTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPConfig.Marshal(b, m, deterministic)
}
func (m *HTTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPConfig.Merge(m, src)
}
func (m *HTTPConfig) XXX_Size() int {
	return xxx_messageInfo_HTTPConfig.Size(m)
}
func (m *HTTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPConfig proto.InternalMessageInfo

func (m *HTTPConfig) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *HTTPConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *HTTPConfig) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

func (m *HTTPConfig) GetRemotePort() int32 {
	if m != nil {
		return m.RemotePort
	}
	return 0
}

func (m *HTTPConfig) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *HTTPConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *HTTPConfig) GetIfHttps() bool {
	if m != nil {
		return m.IfHttps
	}
	return false
}

func (m *HTTPConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HTTPConfig) GetRemotePortStatus() bool {
	if m != nil {
		return m.RemotePortStatus
	}
	return false
}

type HTTPList struct {
	HTTPConfigs          []*HTTPConfig `protobuf:"bytes,1,rep,name=HTTPConfigs,proto3" json:"HTTPConfigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HTTPList) Reset()         { *m = HTTPList{} }
func (m *HTTPList) String() string { return proto.CompactTextString(m) }
func (*HTTPList) ProtoMessage()    {}
func (*HTTPList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *HTTPList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPList.Unmarshal(m, b)
}
func (m *HTTPList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPList.Marshal(b, m, deterministic)
}
func (m *HTTPList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPList.Merge(m, src)
}
func (m *HTTPList) XXX_Size() int {
	return xxx_messageInfo_HTTPList.Size(m)
}
func (m *HTTPList) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPList.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPList proto.InternalMessageInfo

func (m *HTTPList) GetHTTPConfigs() []*HTTPConfig {
	if m != nil {
		return m.HTTPConfigs
	}
	return nil
}

type Device struct {
	RunId                string   `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Mac                  string   `protobuf:"bytes,3,opt,name=Mac,proto3" json:"Mac,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *Device) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Device) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *Device) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type DeviceList struct {
	Devices              []*Device `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeviceList) Reset()         { *m = DeviceList{} }
func (m *DeviceList) String() string { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()    {}
func (*DeviceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *DeviceList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceList.Unmarshal(m, b)
}
func (m *DeviceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceList.Marshal(b, m, deterministic)
}
func (m *DeviceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceList.Merge(m, src)
}
func (m *DeviceList) XXX_Size() int {
	return xxx_messageInfo_DeviceList.Size(m)
}
func (m *DeviceList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceList.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceList proto.InternalMessageInfo

func (m *DeviceList) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func init() {
	proto.RegisterType((*StringValue)(nil), "pb.StringValue")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*ResponseMessage)(nil), "pb.ResponseMessage")
	proto.RegisterType((*HTTPConfig)(nil), "pb.HTTPConfig")
	proto.RegisterType((*HTTPList)(nil), "pb.HTTPList")
	proto.RegisterType((*Device)(nil), "pb.Device")
	proto.RegisterType((*DeviceList)(nil), "pb.DeviceList")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0xc7, 0x9b, 0x7e, 0xf7, 0xc4, 0xea, 0x32, 0x88, 0x0c, 0xbd, 0x90, 0x10, 0x45, 0x82, 0xb8,
	0x41, 0xeb, 0x85, 0x37, 0x82, 0xec, 0xb6, 0xb2, 0x2d, 0x58, 0x37, 0xa4, 0xd5, 0xfb, 0x69, 0x72,
	0x1a, 0x02, 0x4d, 0x66, 0x98, 0x99, 0x2a, 0xbe, 0x88, 0xcf, 0xe4, 0x63, 0xc9, 0x4c, 0x12, 0x5b,
	0xba, 0x14, 0xbc, 0x3b, 0xbf, 0xf3, 0x31, 0x73, 0xfe, 0xff, 0x64, 0x60, 0xac, 0x50, 0xfe, 0xc8,
	0x13, 0x0c, 0x85, 0xe4, 0x9a, 0x93, 0xb6, 0xd8, 0xfa, 0x2f, 0xc0, 0x5d, 0x6b, 0x99, 0x97, 0xd9,
	0x77, 0xb6, 0x3f, 0x20, 0x79, 0x0a, 0x3d, 0x1b, 0x50, 0xc7, 0x73, 0x82, 0x51, 0x5c, 0x81, 0x3f,
	0x80, 0xde, 0xe7, 0x42, 0xe8, 0x5f, 0xfe, 0x27, 0x78, 0x12, 0xa3, 0x12, 0xbc, 0x54, 0xb8, 0x42,
	0xa5, 0x58, 0x86, 0x84, 0x40, 0x77, 0xc6, 0xd3, 0x66, 0xc0, 0xc6, 0x84, 0xc2, 0xa0, 0x2e, 0xd3,
	0xb6, 0x4d, 0x37, 0xe8, 0xff, 0x6e, 0x03, 0x2c, 0x36, 0x9b, 0x68, 0xc6, 0xcb, 0x5d, 0x9e, 0x99,
	0xeb, 0xe2, 0x43, 0xb9, 0x4c, 0x9b, 0xeb, 0x2c, 0x90, 0x67, 0xd0, 0x9f, 0xf3, 0x82, 0xe5, 0x65,
	0x3d, 0x5d, 0x13, 0x99, 0xc0, 0x30, 0xc6, 0x82, 0x6b, 0x5c, 0x46, 0xb4, 0x63, 0x2b, 0xff, 0x98,
	0x3c, 0x07, 0xa8, 0xe2, 0x88, 0x4b, 0x4d, 0xbb, 0x9e, 0x13, 0xf4, 0xe2, 0x93, 0x8c, 0x99, 0xfd,
	0xa6, 0x50, 0x7e, 0x65, 0x05, 0xd2, 0x5e, 0x35, 0xdb, 0xb0, 0xa9, 0x45, 0x4c, 0xa9, 0x9f, 0x5c,
	0xa6, 0xb4, 0x5f, 0xd5, 0x1a, 0x36, 0x52, 0x96, 0xbb, 0x85, 0xd6, 0x42, 0xd1, 0x81, 0xe7, 0x04,
	0xc3, 0xb8, 0x41, 0xe2, 0x81, 0x3b, 0x47, 0x95, 0xc8, 0x5c, 0xe8, 0x9c, 0x97, 0x74, 0x68, 0x07,
	0x4f, 0x53, 0xe4, 0x35, 0x5c, 0x1d, 0x37, 0x58, 0x6b, 0xa6, 0x0f, 0x8a, 0x8e, 0xec, 0x21, 0x0f,
	0xf2, 0xfe, 0x47, 0x18, 0x1a, 0x5f, 0xbe, 0xe4, 0x4a, 0x93, 0xb7, 0xe0, 0x1e, 0x3d, 0x52, 0xd4,
	0xf1, 0x3a, 0x81, 0x3b, 0x7d, 0x1c, 0x8a, 0x6d, 0x78, 0x4c, 0xc7, 0xa7, 0x2d, 0xfe, 0x0e, 0xfa,
	0x73, 0x34, 0x5f, 0xf6, 0x82, 0xa3, 0x04, 0xba, 0x37, 0x69, 0x2a, 0x6b, 0x3f, 0x6d, 0x4c, 0xae,
	0xa0, 0xb3, 0x62, 0x49, 0x6d, 0xa4, 0x09, 0xcf, 0x15, 0x75, 0x1f, 0x28, 0xf2, 0xa7, 0x00, 0xd5,
	0x3d, 0x76, 0xcf, 0x97, 0x30, 0xa8, 0xa8, 0xd9, 0x11, 0xcc, 0x8e, 0x55, 0x2a, 0x6e, 0x4a, 0xd3,
	0x3f, 0x0e, 0xb8, 0xc6, 0xb1, 0x15, 0x2b, 0x59, 0x86, 0x92, 0xbc, 0x83, 0xf1, 0x4c, 0x22, 0xd3,
	0x78, 0x5f, 0xa2, 0xd1, 0x40, 0xce, 0x94, 0x4d, 0xce, 0xd8, 0x6f, 0x91, 0x37, 0x30, 0x9e, 0xe3,
	0x1e, 0x2f, 0x8f, 0x8c, 0x0c, 0x57, 0xbf, 0x68, 0x8b, 0x84, 0x00, 0x77, 0xa8, 0xff, 0xff, 0xf4,
	0xc0, 0xf6, 0xdf, 0xec, 0xf7, 0xb6, 0xff, 0x44, 0xc3, 0xe4, 0x51, 0xd3, 0x6b, 0xe4, 0xfa, 0xad,
	0xdb, 0x0f, 0xf0, 0x2a, 0xe1, 0x45, 0x98, 0x73, 0x6d, 0x1e, 0x52, 0x78, 0x2f, 0xb0, 0x5c, 0xf2,
	0xcd, 0xe2, 0xb0, 0x0d, 0x0d, 0xa3, 0xbc, 0xce, 0xa4, 0x48, 0xae, 0x99, 0xc8, 0x6f, 0xdd, 0x3b,
	0x29, 0x92, 0x75, 0xf5, 0xda, 0x22, 0x67, 0xdb, 0xb7, 0x0f, 0xee, 0xfd, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xec, 0xf2, 0x4e, 0x79, 0x81, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HttpManagerClient is the client API for HttpManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HttpManagerClient interface {
	CreateOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error)
	DeleteOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*Empty, error)
	GetOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error)
	GetAllHTTP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*HTTPList, error)
}

type httpManagerClient struct {
	cc *grpc.ClientConn
}

func NewHttpManagerClient(cc *grpc.ClientConn) HttpManagerClient {
	return &httpManagerClient{cc}
}

func (c *httpManagerClient) CreateOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error) {
	out := new(HTTPConfig)
	err := c.cc.Invoke(ctx, "/pb.HttpManager/CreateOneHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpManagerClient) DeleteOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.HttpManager/DeleteOneHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpManagerClient) GetOneHTTP(ctx context.Context, in *HTTPConfig, opts ...grpc.CallOption) (*HTTPConfig, error) {
	out := new(HTTPConfig)
	err := c.cc.Invoke(ctx, "/pb.HttpManager/GetOneHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpManagerClient) GetAllHTTP(ctx context.Context, in *Device, opts ...grpc.CallOption) (*HTTPList, error) {
	out := new(HTTPList)
	err := c.cc.Invoke(ctx, "/pb.HttpManager/GetAllHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpManagerServer is the server API for HttpManager service.
type HttpManagerServer interface {
	CreateOneHTTP(context.Context, *HTTPConfig) (*HTTPConfig, error)
	DeleteOneHTTP(context.Context, *HTTPConfig) (*Empty, error)
	GetOneHTTP(context.Context, *HTTPConfig) (*HTTPConfig, error)
	GetAllHTTP(context.Context, *Device) (*HTTPList, error)
}

// UnimplementedHttpManagerServer can be embedded to have forward compatible implementations.
type UnimplementedHttpManagerServer struct {
}

func (*UnimplementedHttpManagerServer) CreateOneHTTP(ctx context.Context, req *HTTPConfig) (*HTTPConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneHTTP not implemented")
}
func (*UnimplementedHttpManagerServer) DeleteOneHTTP(ctx context.Context, req *HTTPConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneHTTP not implemented")
}
func (*UnimplementedHttpManagerServer) GetOneHTTP(ctx context.Context, req *HTTPConfig) (*HTTPConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneHTTP not implemented")
}
func (*UnimplementedHttpManagerServer) GetAllHTTP(ctx context.Context, req *Device) (*HTTPList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHTTP not implemented")
}

func RegisterHttpManagerServer(s *grpc.Server, srv HttpManagerServer) {
	s.RegisterService(&_HttpManager_serviceDesc, srv)
}

func _HttpManager_CreateOneHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpManagerServer).CreateOneHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HttpManager/CreateOneHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpManagerServer).CreateOneHTTP(ctx, req.(*HTTPConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpManager_DeleteOneHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpManagerServer).DeleteOneHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HttpManager/DeleteOneHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpManagerServer).DeleteOneHTTP(ctx, req.(*HTTPConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpManager_GetOneHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpManagerServer).GetOneHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HttpManager/GetOneHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpManagerServer).GetOneHTTP(ctx, req.(*HTTPConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpManager_GetAllHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpManagerServer).GetAllHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HttpManager/GetAllHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpManagerServer).GetAllHTTP(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HttpManager",
	HandlerType: (*HttpManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOneHTTP",
			Handler:    _HttpManager_CreateOneHTTP_Handler,
		},
		{
			MethodName: "DeleteOneHTTP",
			Handler:    _HttpManager_DeleteOneHTTP_Handler,
		},
		{
			MethodName: "GetOneHTTP",
			Handler:    _HttpManager_GetOneHTTP_Handler,
		},
		{
			MethodName: "GetAllHTTP",
			Handler:    _HttpManager_GetAllHTTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
